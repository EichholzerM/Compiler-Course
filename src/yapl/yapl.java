/* Generated By:JavaCC: Do not edit this line. yapl.java */
package yapl;
public class yapl implements yaplConstants {

  final public void Type() throws ParseException {
    jj_consume_token(PrimType);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(33);
      jj_consume_token(34);
    }
  }

  final public void Selector() throws ParseException {
    jj_consume_token(33);
    Expr();
    jj_consume_token(34);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      Selector();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  final public void ArrayLen() throws ParseException {
    jj_consume_token(35);
    jj_consume_token(IDENT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      Selector();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  final public void PrimaryExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Literal:
      jj_consume_token(Literal);
      break;
    case 36:
      jj_consume_token(36);
      Expr();
      jj_consume_token(37);
      break;
    default:
      jj_la1[4] = jj_gen;
      if (jj_2_1(2)) {
        ProcedureCall();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          jj_consume_token(IDENT);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 33:
            Selector();
            break;
          default:
            jj_la1[3] = jj_gen;
            ;
          }
          break;
        case 35:
          ArrayLen();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void ProcedureCall() throws ParseException {
    jj_consume_token(IDENT);
    jj_consume_token(36);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case Literal:
    case IDENT:
    case 35:
    case 36:
    case 39:
    case 40:
      ArgumentList();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(37);
  }

  final public void ArgumentList() throws ParseException {
    Expr();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      jj_consume_token(38);
      Expr();
    }
  }

  final public void UnaryExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 39:
    case 40:
      AddOp();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    PrimaryExpr();
  }

  final public void MulExpr() throws ParseException {
    UnaryExpr();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
      case 42:
      case 43:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      MulOp();
      UnaryExpr();
    }
  }

  final public void AddExpr() throws ParseException {
    MulExpr();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 39:
      case 40:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      AddOp();
      MulExpr();
    }
  }

  final public void RelExpr() throws ParseException {
    AddExpr();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
      case 45:
      case 46:
      case 47:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      RelOp();
      AddExpr();
    }
  }

  final public void AddOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 39:
      jj_consume_token(39);
      break;
    case 40:
      jj_consume_token(40);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MulOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 41:
      jj_consume_token(41);
      break;
    case 42:
      jj_consume_token(42);
      break;
    case 43:
      jj_consume_token(43);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void RelOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
      jj_consume_token(44);
      break;
    case 45:
      jj_consume_token(45);
      break;
    case 46:
      jj_consume_token(46);
      break;
    case 47:
      jj_consume_token(47);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void EqualOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 48:
      jj_consume_token(48);
      break;
    case 49:
      jj_consume_token(49);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void EqualExpr() throws ParseException {
    RelExpr();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 48:
      case 49:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      EqualOp();
      RelExpr();
    }
  }

  final public void CondAndExpr() throws ParseException {
    EqualExpr();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      jj_consume_token(AND);
      EqualExpr();
    }
  }

  final public void Expr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Literal:
    case IDENT:
    case 35:
    case 36:
    case 39:
    case 40:
      CondAndExpr();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_8;
        }
        jj_consume_token(OR);
        CondAndExpr();
      }
      break;
    case NEW:
      CreationExpr();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CreationExpr() throws ParseException {
    jj_consume_token(NEW);
    jj_consume_token(PrimType);
    jj_consume_token(33);
    Expr();
    jj_consume_token(34);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_9;
      }
      jj_consume_token(33);
      Expr();
      jj_consume_token(34);
    }
  }

  final public void ConstDecl() throws ParseException {
    jj_consume_token(CONST);
    jj_consume_token(IDENT);
    jj_consume_token(50);
    jj_consume_token(Literal);
    jj_consume_token(51);
  }

  final public void VarDecl() throws ParseException {
    jj_consume_token(IDENT);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_10;
      }
      jj_consume_token(38);
      jj_consume_token(IDENT);
    }
    jj_consume_token(52);
    Type();
    jj_consume_token(51);
  }

  final public void Decl() throws ParseException {
    jj_consume_token(DECLARE);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
      case IDENT:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
        ConstDecl();
        break;
      case IDENT:
        VarDecl();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Assignment() throws ParseException {
    jj_consume_token(IDENT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      Selector();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(53);
    Expr();
  }

  final public void IfStatement() throws ParseException {
    jj_consume_token(IF);
    Expr();
    jj_consume_token(THEN);
    StatementList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      StatementList();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(ENDIF);
  }

  final public void WhileStatement() throws ParseException {
    jj_consume_token(WHILE);
    Expr();
    jj_consume_token(DO);
    StatementList();
    jj_consume_token(ENDWHILE);
  }

  final public void ReturnStatement() throws ParseException {
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case Literal:
    case IDENT:
    case 35:
    case 36:
    case 39:
    case 40:
      Expr();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
  }

  final public void WriteStatement() throws ParseException {
    jj_consume_token(WRITE);
    jj_consume_token(STRING);
  }

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      IfStatement();
      break;
    case WHILE:
      WhileStatement();
      break;
    case RETURN:
      ReturnStatement();
      break;
    case WRITE:
      WriteStatement();
      break;
    default:
      jj_la1[27] = jj_gen;
      if (jj_2_2(2)) {
        Assignment();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          ProcedureCall();
          break;
        case DECLARE:
        case BEGIN:
          Block();
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void StatementList() throws ParseException {
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECLARE:
      case BEGIN:
      case IF:
      case WHILE:
      case RETURN:
      case WRITE:
      case IDENT:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_12;
      }
      Statement();
      jj_consume_token(51);
    }
  }

  final public void Block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECLARE:
      Decl();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    jj_consume_token(BEGIN);
    StatementList();
    jj_consume_token(END);
  }

  final public void FormalParam() throws ParseException {
    jj_consume_token(IDENT);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_13;
      }
      jj_consume_token(38);
      jj_consume_token(IDENT);
    }
    jj_consume_token(52);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case READONLY:
      jj_consume_token(READONLY);
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    Type();
  }

  final public void FormalParamList() throws ParseException {
    FormalParam();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 51:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_14;
      }
      jj_consume_token(51);
      FormalParam();
    }
  }

  final public void Procedure() throws ParseException {
    jj_consume_token(PROCEDURE);
    jj_consume_token(IDENT);
    jj_consume_token(36);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      FormalParamList();
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    jj_consume_token(37);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 52:
      jj_consume_token(52);
      Type();
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    Block();
    jj_consume_token(IDENT);
    jj_consume_token(51);
  }

  final public void Program() throws ParseException {
    jj_consume_token(PROGRAM);
    jj_consume_token(IDENT);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECLARE:
      case PROCEDURE:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECLARE:
        Decl();
        break;
      case PROCEDURE:
        Procedure();
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(BEGIN);
    StatementList();
    jj_consume_token(END);
    jj_consume_token(IDENT);
    jj_consume_token(54);
  }

  final public void Start() throws ParseException {
  Token t;
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROGRAM:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_16;
      }
      Program();
    }
          do
          {
            t = getNextToken();
            //System.out.println(t.kind + " : " + t.toString());
          } while (t.kind != EOF);
    jj_consume_token(0);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(36)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(IDENT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(33)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_18()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public yaplTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[39];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x10000000,0x40000000,0x50000200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x800,0x50000200,0x0,0x0,0x40200000,0x40200000,0x0,0x40000,0x50000200,0x3110000,0x40005000,0x43115000,0x1000,0x0,0x4000000,0x0,0x40000000,0x0,0x8001000,0x8001000,0x2000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2,0x2,0x2,0x2,0x10,0x8,0x198,0x40,0x180,0xe00,0x180,0xf000,0x180,0xe00,0xf000,0x30000,0x30000,0x0,0x0,0x198,0x2,0x40,0x0,0x0,0x2,0x0,0x198,0x0,0x0,0x0,0x0,0x40,0x0,0x80000,0x0,0x100000,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public yapl(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public yapl(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new yaplTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public yapl(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new yaplTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public yapl(yaplTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(yaplTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[55];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 39; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 55; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
